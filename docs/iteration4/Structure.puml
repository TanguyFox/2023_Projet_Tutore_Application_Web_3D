@startuml
'https://plantuml.com/class-diagram

class Point{
+ x : int
+ y : int
+ z : int

+ equals(Point) : boolean
+ compare(Point) : float
+ toString() : String
+ set(Point) : void
+ distance(Point) : float

}
class Vertex{
+ setEdge(Edge) : void
+ toString() : String
+ compare(Vertex) : float
+ addHalfEdge(HalfEdge) : void
+ equals(Vertex) : boolean
}
 Vertex -> Point : pointDepart
HalfEdge <-- Vertex : halfedges

class HalfEdge{
+ next : HalfEdge
+ prev : HalfEdge
+ opposite : HalfEdge
+ headVertex(): Vertex
+ tailVertex() : Vertex
+ setFace(Face) : void
+ setNext(HalfEdge) : void
+ setPrev(HalfEdge) : void
+ setOpposite(HalfEdge) : void
+ toString() : String
+ compare(HalfEdge) : float
+ equals(HalfEdge) : boolean
}
Vertex <-- HalfEdge : vertexDepart
Face <- HalfEdge : face

class Face{
+ degree() : int
+ getAdjHole() : int
+ isWellPriented() : boolean
+ compare(Face) : boolean
+ getAdjacentes() : [Face]
+ has3FaceAdjacentes() : boolean
}
HalfEdge <- Face : edge

class Mesh{
+ detectHoles(): [Face]
+ setMeshGeneraux() : Mesh
+ highlightEdge() : void


}
Face <-- Mesh : faces
HalfEdge <-- Mesh : boundaryEdges


class VertexNode {
+ right : VertexNode
+ down : VertexNode
}
VertexNode -> Point : key
VertexNode --> Vertex : value

class VertexSkipList{
+ size : int
+ insertVertex(Point, Vertex) : void
+ searchVertex(Point) : Vertex
+ size() : int
+ getHalfEdgeProbem() : [HalfEdge]
}
VertexNode <- VertexSkipList : head




@enduml